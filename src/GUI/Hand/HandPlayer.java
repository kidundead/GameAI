package GUI.Hand;

import GUI.Board;
import GUI.model.Domino;
import GUI.model.event.MouseDominoHand;
import java.util.List;
import logic.game.RoundLogic;
import model.interfaces.Player;
import model.interfaces.Hand;
import model.interfaces.Piece;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author lucas
 */
public class HandPlayer extends GUI.model.HandGUI implements Player {

    private int point;
    private int firstPiece = -1;

    public HandPlayer(Hand<Piece> hand) {
        super(hand);

        piecesToDomino(false);

        for (Domino domino : dominos) {
            domino.setPlayer(this);
            domino.addMouseListener(new MouseDominoHand(domino, this));
            add(domino);
        }

        this.point = 0;
        for (int i = 0; i < hand.qtdHand(); i++) {
            Piece piece = (Piece) hand.show(i);
            this.point += piece.getPoint();
        }
    }

    @Override
    public void addDomino(Piece piece) {
        this.hand.add(piece);
        Domino domino = piecesToDomino(piece, false);
        this.dominos.add(domino);
        add(domino);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public boolean takeFromStack() {
        try {
            Thread.sleep(1500);
        } catch (InterruptedException ex) {
            System.err.println(ex.getMessage());
        }
        Piece piece = mediator.takeStack();
        if (piece != null) {
            this.point += piece.getPoint();
            addDomino(piece);
            return true;
        }
        return false;
    }

    @Override
    public Piece putOnBoard() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void putOnBoard(Domino domino) {

        if (Board.getInstance().addDomino(domino)) {
            update(domino);
        }

    }

    public void putOnBoard(Domino domino, int side) {

        if (Board.getInstance().addDomino(domino, side)) {
            update(domino);
        }

    }

    private void update(Domino domino) {
        mediator.informPiecePlaced(domino.getPiece(), this);

        removeFromHand(domino);

        hand.remove(domino.getPiece());
        this.point -= domino.getPiece().getPoint();

        setActive(false);
        RoundLogic.getInstance().nextPlayerTurn();
    }

    @Override
    public void doMove() {
        if (firstPiece >= 0) {
            putOnBoard(dominos.get(firstPiece));
            firstPiece = -1;
        } else {
            int count = 0;
            for (int i = 0; i < dominos.size(); i++) {
                if (Board.getInstance().checkPossible(dominos.get(i))) {
                    count++;
                }
            }
            if (count > 0) {
                setActive(true);
            } else {
                //timer e mensagem para pegar do stack

                if (takeFromStack()) {
                    doMove();
                }
                //timer e mensagem
                RoundLogic.getInstance().nextPlayerTurn();
            }
        }
    }

    @Override
    public Hand<Piece> showHand() {
        return hand;
    }

    @Override
    public int getPoint() {
        return this.point;
    }

    @Override
    public int remaining() {
        return showHand().qtdHand();
    }

    private void setActive(boolean state) {
        for (Domino domino : dominos) {
            if (Board.getInstance().checkPossible(domino)) {
                domino.setActive(state);
            }
        }
    }

    @Override
    public void piecePlaced(Piece piece) {
        ;
    }

    @Override
    public void placePiece(int i) {
        firstPiece = i;
    }

    @Override
    public List<Domino> getDominos() {
        return dominos;

    }
}
